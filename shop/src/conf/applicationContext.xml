<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"
	default-autowire="byName">

	<description>Spring公共配置文件 </description>
	<context:annotation-config></context:annotation-config>
	<!-- 定义受环境影响易变的变量 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath*:conf/application.properties
				</value>

				<!-- 服务器生产环境配置 -->
				<!-- <value>file:/var/myapp/application.server.properties</value> -->
			</list>
		</property>
	</bean>

	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan
		base-package="com.izhi.platform,com.izhi.shop" />

	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling DBCP -->
		<property name="initialSize" value="5" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="30" />
		<property name="maxWait" value="1000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="defaultAutoCommit" value="false" />
	</bean>

	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
	<!--
		<jee:jndi-lookup id="dataSource"
		jndi-name="java:comp/env/jdbc/ExampleDB" />
	-->

	<!-- Hibernate配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}
				</prop>
				<!--
					<prop
					key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.ehcache_config_file}</prop>
				-->
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.izhi.platform.model</value>
				<value>com.izhi.shop.model</value>
			</list>
		</property>
	</bean>

	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 事务管理器配置,多数据源JTA事务-->
	<!--
		<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager or
		WebLogicJtaTransactionManager" />
	-->

	<!--
		使用annotation定义事务 <tx:annotation-driven
		transaction-manager="transactionManager" />
	-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="is*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:advisor pointcut="execution(* *..*ServiceImpl.*(..))"
			advice-ref="txAdvice" />
	</aop:config>
	<bean id="autoproxy"
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />
	<bean id="cacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="shared" value="true"></property>
	</bean>
	<bean id="cacheProviderFacade" class="org.springmodules.cache.provider.ehcache.EhCacheFacade">
		<property name="cacheManager" ref="cacheManager" />
	</bean>

	<bean id="cachingAttributeSource"
		class="org.springmodules.cache.annotations.AnnotationCachingAttributeSource">
	</bean>
	<bean id="cachingInterceptor"
		class="org.springmodules.cache.interceptor.caching.MetadataCachingInterceptor">
		<property name="cacheProviderFacade" ref="cacheProviderFacade" />
		<property name="cachingAttributeSource" ref="cachingAttributeSource" />
		<property name="cachingListeners">
			<list>
				<bean class="com.izhi.platform.webapp.listener.EhCacheListener"></bean>
			</list>
		</property>
		<property name="cachingModels">
			<props>
				<prop key="userCaching">cacheName=userCache</prop>
				<prop key="orgCaching">cacheName=orgCache</prop>
				<prop key="roleCaching">cacheName=roleCache</prop>
				<prop key="functionCaching">cacheName=functionCache</prop>
				<prop key="personCaching">cacheName=personCache</prop>
				<prop key="regionCaching">cacheName=regionCache</prop>
				<prop key="brandCaching">cacheName=brandCache</prop>
				<prop key="supplierCaching">cacheName=supplierCache</prop>
				<prop key="areaTypeCaching">cacheName=areaTypeCache</prop>
				<prop key="areaCaching">cacheName=areaCache</prop>
				<prop key="currencyCaching">cacheName=currencyCache</prop>
				<prop key="agentLevelCaching">cacheName=agentLevelCache</prop>
				<prop key="memberLevelCaching">cacheName=memberLevelCache</prop>
			</props>
		</property>
	</bean>

	<bean id="cachingAttributeSourceAdvisor"
		class="org.springmodules.cache.interceptor.caching.CachingAttributeSourceAdvisor">
		<constructor-arg ref="cachingInterceptor" />
	</bean>
	<bean id="flushingAttributeSource"
		class="org.springmodules.cache.annotations.AnnotationFlushingAttributeSource">
	</bean>
	<bean id="flushingInterceptor"
		class="org.springmodules.cache.interceptor.flush.MetadataFlushingInterceptor">
		<property name="cacheProviderFacade" ref="cacheProviderFacade" />
		<property name="flushingAttributeSource" ref="flushingAttributeSource" />
		<property name="flushingModels">
			<props>
				<prop key="userFlushing">cacheNames=userCache</prop>
				<prop key="roleFlushing">cacheNames=roleCache,userCache
				</prop>
				<prop key="orgFlushing">cacheNames=orgCache,personCache,userCache,roleCache
				</prop>
				<prop key="personFlushing">cacheNames=userCache,personCache
				</prop>
				<prop key="functionFlushing">cacheNames=functionCache
				</prop>
				<prop key="brandFlushing">cacheNames=brandCache
				</prop>
				<prop key="supplierFlushing">cacheNames=supplierCache
				</prop>
				<prop key="areaTypeFlushing">cacheNames=areaTypeCache</prop>
				<prop key="areaFlushing">cacheNames=areaCache</prop>
				<prop key="currencyFlushing">cacheNames=currencyCache</prop>
				<prop key="agentLevelFlushing">cacheNames=agentLevelCache</prop>
				<prop key="memberLevelFlushing">cacheNames=memberLevelCache</prop>
			</props>
		</property>
	</bean>
	<bean id="flushingAttributeSourceAdvisor"
		class="org.springmodules.cache.interceptor.flush.FlushingAttributeSourceAdvisor">
		<constructor-arg ref="flushingInterceptor" />
	</bean>

	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.live.com" />
		<property name="port" value="25" />
		<property name="username" value="service@lejiago.com" />
		<property name="password" value="lejiago_123" />
		<property name="protocol" value="smtp"></property>
		<property name="defaultEncoding" value="UTF-8" />
		<property name="javaMailProperties">
			<props>  
                 <prop key="mail.smtp.auth">true</prop>  
                 <prop key="mail.smtp.timeout">25000</prop>  
                 <prop key="mail.smtp.starttls.enable">true</prop>  
             </props>  
		</property>
	</bean>

	<bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="service@lejiago.com" />
		<property name="subject" value="恭喜你成功注册乐佳购物网！" />
	</bean>
	<!-- 
	<bean id="methodInvokingJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">           
   
   <property name="targetObject"><ref bean="messageSender"/></property>          
   <property name="targetMethod"><value>sendMail</value></property>   
   
  </bean>   
   
  <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">  
   <property name="jobDetail"><ref bean="methodInvokingJobDetail"/></property>  
   <property name="startDelay">  
     3 seconds   
    <value>3000</value>  
   </property>  
   <property name="repeatInterval">  
    repeat every 6 seconds  
    <value>6000</value>  
   </property>  
  </bean>   
   
   
  <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">  
   <property name="jobDetail"> <ref bean="methodInvokingJobDetail"/></property>  
   <property name="cronExpression"> <value>0 0 6,12,20 * * ?</value>  </property>    
  </bean>   
   
  <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">   
   <property name="triggers">  
     <list>  
     <ref local="simpleTrigger"/>  
    </list>   
   </property>     
  </bean> 
	 -->
</beans>